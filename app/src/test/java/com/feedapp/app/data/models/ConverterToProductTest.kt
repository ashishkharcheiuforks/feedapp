package com.feedapp.app.data.modelsimport com.feedapp.app.data.api.models.recipedetailed.nn.NutrientXimport com.feedapp.app.data.api.models.recipedetailed.nn.Nutritionimport com.feedapp.app.data.api.models.recipedetailed.nn.RecipeDetailedResponseimport com.feedapp.app.data.api.models.usdafooddetailed.FoodNutrientimport com.feedapp.app.data.api.models.usdafooddetailed.Nutrientimport com.feedapp.app.data.api.models.usdafooddetailed.USDAFoodModelimport com.feedapp.app.data.api.models.usdafooddetailed.usda_proteinimport org.junit.jupiter.api.Testimport org.junit.jupiter.api.Assertions.*internal class ConverterToProductTest {    private val converter = ConverterToProduct()    companion object {        private const val grams = 100f    }    @Test    fun convertUSDAModel() {        fun test100Grams() {            val proteinsAmount = 29.3f            val foodNutrients = listOf(                FoodNutrient(                    amount = proteinsAmount,                    nutrientAnalysisDetails = listOf(),                    nutrient = Nutrient(0, usda_protein, "", 0, ""),                    id = 0,                    type = ""                )            )            val usdaModel = USDAFoodModel(foodNutrients = foodNutrients)            val converted = converter.convertUSDAModel(usdaModel, grams)            assert(proteinsAmount == converted.consumedProtein)        }        fun test50Grams() {            val proteinsAmount = 29.3f            val foodNutrients = listOf(                FoodNutrient(                    amount = proteinsAmount,                    nutrientAnalysisDetails = listOf(),                    nutrient = Nutrient(0, usda_protein, "", 0, ""),                    id = 0,                    type = ""                )            )            val usdaModel = USDAFoodModel(foodNutrients = foodNutrients)            val converted = converter.convertUSDAModel(usdaModel, grams / 2)            assert(proteinsAmount == (converted.consumedProtein ?: 0f) * 2)        }        test100Grams()        test50Grams()    }    @Test    fun convertRecipe() {        fun oneServingTest() {            val proteinsAmount = 311.3f            val nutrients = arrayListOf(NutrientX(amount = proteinsAmount, title = "Protein"))            val nutrition = Nutrition(nutrients = nutrients)            val recipe = RecipeDetailedResponse(nutrition = nutrition)            val converted = converter.convertRecipe(recipe, 1)            assert(proteinsAmount == converted.consumedProtein)        }        fun threeServingsTest() {            val proteinsAmount = 311.3f            val nutrients = arrayListOf(NutrientX(amount = proteinsAmount, title = "Protein"))            val nutrition = Nutrition(nutrients = nutrients)            val recipe = RecipeDetailedResponse(nutrition = nutrition)            val converted = converter.convertRecipe(recipe, 3)            assert(proteinsAmount * 3 == converted.consumedProtein)        }        oneServingTest()        threeServingsTest()    }    @Test    fun convertFoodProduct() {        fun test100Grams() {            val proteinsAmount = 81f            val foodProduct = FoodProduct(id = 0, name = "Cake", protein = proteinsAmount)            val converted = converter.convertFoodProduct(foodProduct, grams)            assert(proteinsAmount == converted.consumedProtein)        }        fun test350grams() {            val proteinsAmount = 81f            val grams = 350f            val foodProduct = FoodProduct(id = 0, name = "Cake", protein = proteinsAmount)            val converted = converter.convertFoodProduct(foodProduct, grams)            assert(proteinsAmount * (grams / 100) == converted.consumedProtein)        }        test100Grams()        test350grams()    }}